R.version
R.version
R.version
R.version
install.packages("installr")
library(installr)
updateR()
updateR()
install.packages('C:/Users/renz/Downloads/, repos = NULL, type = “source”)
}
.
install.packages('C:/Users/renz/Downloads/', repos = NULL, type = 'source')
install.packages('C:/Users/renz/Downloads/R-3.5.1.tar.gz', repos = NULL, type = 'source')
install.packages('C:/Users/renz/Downloads/R-3.5.1.tar.gz')
lm2.fit <- (sales ~., data = advertising)
lm2.fit <- lm(sales ~., data = advertising)
lm2.fit <- lm(sales ~., data = advertising)
advertising <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv')
str(advertising)
lm.fit <- lm(sales ~ TV, data = advertising)
summary(lm.fit)
View(advertising)
lm2.fit <- lm(sales ~., data = advertising)
#-----
# Credit 자료
library(datasets)
library(MASS)
library(ISLR)
summary(credit.fit)
credit.fit <- lm(balance ~ gender, data = credit)
head(Credit)
credit.fit <- lm(balance ~ gender, data = Credit)
credit.fit <- lm(Balance ~ Gender, data = Credit)
summary(credit.fit)
credit_Ethnicity.fit <- lm(Balance ~ Ethnicity, data = Credit)
summary(credit_Ethnicity.fit)
R.version
R.version
R.version
R.studio
R.version
R.version
#--- 1. Prussian horsekick data (p. 32)
k = c(0, 1, 2, 3, 4)
x = c(109 , 65, 22, 3, 1)
p = x / sum (x) # relative frequencies
print (p)
par ( mfrow = c(1 ,2)) #multiple graphs
barplot (x, names = k); pie(x)
barplot (x, names = k); pie(x)
r = sum (k * p) # mean
r = sum (k * p) # mean
v = sum (x * (k - r)^2) / 199 # variance
f = dpois (k, r) #poisson density, 단위 시간당 죽음이 일어날 횟수에 대한 기대값이 r일때, k번 일어날 확률
print( cbind (k, p, f)) # 사망수, 실제 사망수 비율, 포아송 분포(기대값 0.61일때)로부터의 사망수 확률
r
V
V
v
print( cbind (k, p, f)) # 사망수, 실제 사망수 비율, 포아송 분포(기대값 0.61일때)로부터의 사망수 확률
#sample function : random sampling from finite population
sample (1:40 ,5)  # 5개 랜덤하게 뽑는다.
sample (c("H","T"), 10, replace =T) # 복원추출한다.
sample (c("s", "f"), 10, replace =T, prob =c(0.9 , 0.1))
#dnorm, pnorm, qnorm, and rnorm
x = seq ( -4 ,4 ,0.1); pp = seq (0 ,1 ,0.001);
par( mfrow = c(2,2))
plot (x, dnorm(x), type = "l")       #Density or point probability
plot (x, pnorm(x), type = "l")       #Cumulated probability, distribution function
plot (pp , qnorm (pp), type = "l")    #Quantiles
plot ( rnorm (200))                   #random numbers
pp
# Example 1: plot, text and abline
par (mfrow = c(1 ,1))
?runif
x <- runif(50,0,2); y <- runif(50,0,2) #random sample in uniform(0,2) distribution 50개씩
plot (x, y, main =" Main title ", sub =" subtitle ", # x축 라벨 밑 subtitle
xlab ="x- label ", ylab ="y- label ")
abline (a = 0.5 , b = 1) #a: intercept, b : slope
abline (h = 0.5 , col = 'red ')
abline (v = 0.5 , col = " blue ")
text (0.5 ,0.6 , " text at x = 0.5 , y = 0.6 ")
# Example 1: plot, text and abline
par (mfrow = c(1 ,1))
x <- runif(50,0,2); y <- runif(50,0,2) #random sample in uniform(0,2) distribution 50개씩
plot (x, y, main =" Main title ", sub =" subtitle ", # x축 라벨 밑 subtitle
xlab ="x- label ", ylab ="y- label ")
abline (a = 0.5 , b = 1) #a: intercept, b : slope
abline (h = 0.5 , col = 'red ')
abline (v = 0.5 , col = " blue ")
text (0.5 ,0.6 , " text at x = 0.5 , y = 0.6 ") #설명달
text (0.5 ,0.6 , " text at x = 0.5 , y = 0.6 ", col = white) #설명달
text (0.5 ,0.6 , " text at x = 0.5 , y = 0.6 ", col = 'white') #설명달
# Example 2: plot, text and lines
head ( USArrests )
attach ( USArrests )
?attach
plot ( Murder , Assault , pch = 20, col = " red ") #pch : plotting character
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5) #cex : scaling of text
localregfit <- lowess ( Assault ~ Murder )
localregfit <- lowess ( Assault ~ Murder )
# Example 2: plot, text and lines
head ( USArrests )
attach ( USArrests ) # 일일히 $ 안쓰고 변수를 뙇 R에 주입시키기
plot ( Murder , Assault , pch = 20, col = " red ") #pch : plotting character
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5) #cex : scaling of text
localregfit <- lowess ( Assault ~ Murder )
#lowess returns an object containing components x and y which give the coordinates of the smooth
#추세선 찾는 방법 중 하나.
lines ( localregfit $x, localregfit $y)
# Example 3: Print the rownames instead of symbols
plot ( Murder , Assault , type = "n")
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5)
# Example 4: Scatterplot matrix for multi-variate data frame
plot( USArrests ) #or
pairs( USArrests )
# Example 4: Scatterplot matrix for multi-variate data frame
plot( USArrests ) #or
pairs( USArrests )
h <- hist (x, plot =F)
ylim <- range (0, h$ density , dnorm (0))
hist (x, freq =F, ylim = ylim )
curve ( dnorm (x), add=T)
?curve
if(1==0){
print(1)
}else{
print(2)
}
detach(USArrests)
# Conditional Execut기ions: ifelse statement operates on vectors
x <- 1:10
ifelse (x <5, x, 0)
# for Loops : Loops over a fixed set of values
x <- seq (0, 1 ,.05)
plot (x, x, ylab ="y", type ="l")
x
for ( j in 2:8 ) lines (x, x^j)
lines()
?lines
# while Loops: Iterates as long as a condition is true
z <- 0
while(z <5){
z <- z + 2
print (z)
}
# while Loop with break statement
z <- 0
while(T) {
z <- z+ 1
print(z)
if(z>2) break
}
# row마다 vector마다 계산을 따로해주는거
apply ( USArrests , 2, mean )
?apply
#library(ISwR)
lapply(thuesen, mean, na.rm=T)
library(ISwR)
install.packages(ISWR)
install.packages('ISWR')
Yes
install.packages('ISwR')
library(ISwR)
str(ISwR)
library(ISwR)
str(ISwR)
str(ISwR)
ISwR
str(ISwR)
install.packages('ISwR')
install.packages("ISwR")
library(ISwR)
str(ISwR)
lapply(thuesen, mean, na.rm=T)
sapply ( thuesen , mean , na.rm=T)
str(thuesen)
lapply(thuesen, mean, na.rm=T)
sapply ( thuesen , mean , na.rm=T)
#tapply : factor에 따라 첫번째 인자의 function값을 출력
#median of energy expenditure for each level (lean, obese)
data ( energy )
tapply ( energy $ expend , energy $ stature , median )
is(energy$stature)
str(energy)
tapply ( energy $ expend , energy $ stature , median )  # 각각의 중간값출력
#tapply : factor에 따라 첫번째 인자의 function값을 출력
#median of energy expenditure for each level (lean, obese)
data ( energy )
head(energy)
# R function example 1
myfn <- function (x1 , x2 =5) {
z1 <- x1 / x1
z2 <- x2 * x2
myvec <- c(z1 , z2)
return ( myvec )
}
myfn(x1=2, x2=3)
myfn(2,3)
x <- myfn(5); x
?deparse
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x)) ,...){
h <- hist (x, plot =F, ...)
s <- sd(x)
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab , ...)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
?substitute
?deparse
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x)) ,...){
h <- hist (x, plot =F, ...)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab , ...)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x))){
h <- hist (x, plot =F, ...)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x),...)){
h <- hist (x, plot =F, ...)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab,...)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
,...
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x)) ,...){
h <- hist (x, plot =F, ...)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab , ...)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x))){
h <- hist (x, plot =F, ...)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x))){
h <- hist (x, plot =F)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
?hist
substitute()
?substitute
hist.with.normal <- function (x, xlab = deparse (substitute(x)) ,...){
h <- hist (x, plot =F, ...)  # deparse는 변수를 캐릭터형으로 넣어주라는것.
# ... 은 뒤에거 생략하라는 말이다.??
s <- sd(x)                   # substitue
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab , ...)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
install.packages('rmarkdown')
library(rmarkdown)
install.packages('knitr')
install.packages("knitr")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
```{r junglim echo =FALST}
plot(cars)
plot(cars)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos'))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos'))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos'))
)
IRkernel::installspec()
install.packages('IRkernel')
installr::installr()
devtools::install_github('IRkernel/IRkernel')
?devtools
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
install.packages('digest')
install.packages("digest")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
library(datasets)
library(MASS)
library(ISLR)
head(Credit)
credit.fit <- lm(Balance ~ Gender, data = Credit)
summary(credit.fit)
credit_Ethnicity.fit <- lm(Balance ~ Ethnicity, data = Credit)
summary(credit_Ethnicity.fit)
?sapply
sapply(Credit, levels)
?levels
?require
require(datasets
)
require(datasets)
require(qqplot2)
require(ggplot2)
data(swiss)
str(swiss)
sapply(swiss, levels)
head(swiss)
?predict
sapply(Credit, levels)  # data.frame의 모든 facotr를 제
sales.fit <- lm(sales ~ tv*radio, data = adv)
head(advertising)
advertising <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv')
head(advertising)
str(advertising)
head(advertising)
sales.fit <- lm(sales ~ tv*radio, data = advertising)
sales.fit <- lm(sales ~ TV*radio, data = advertising)
summary(sales.fit)
#----
mpg.fit <- lm(mpg ~ poly(horsepower, 2, raw = T), data = Auto)
#----
str(Auto)
sapply(Auto, levels)
#----
str(Auto)
?poly
auto.fit <- lm(mpg ~ poly(horsepower, 2, raw = T), data = Auto)
summary(auto.fit)
library(ISLR)
#----
str(auto)
?poly
library(datasets)
library(MASS)
library(ISLR)
head(Credit)
attach(Credit)
y = Balance
inc = Income
g = Gender
lm(y~inc)$coeffiencets
lm(y~inc)
y = Balance
inc = Income
g = Gender
lm(y~inc)$coefficients
lm(y~inc)$coefficients
y = Balance
inc = Income
g = Gender
lm(y~inc)$coefficients
lm(y~inc)
lm(y~inc)$coefficients
?cor
beta= sqrt(var(y)/var(inc)*cor(y,inc))
beta1= sqrt(var(y)/var(inc)*cor(y,inc))
beta1
beta1= sqrt(var(y)/var(inc))*cor(y,inc)
beta1
lm(y~inc+g)$coefficients
lm(y~inc+g)
lm(y~inc+g)$coefficients
lm(inc~g)
lm(inc~g)$resid
residx = lm(inc~g)$resid
residy = lm(y~g)$resid
beta.inc = sqrt(var(residy)/var(residx)*cor(residy,residx))
beta.inc
beta.inc = sqrt(var(residy)/var(residx))*cor(residy,residx)
beta.inc
credit.fit <-lm(Balance~., data=Credit)
lm(Balance~., data=Credit)
lm(Balance~., data=Credit)
credit.fit<-lm(Balance~., data=Credit)
summary(credit.fit)
summary(credit.fit)
aic.credit <- stepAIC(credit.fit, direction = 'both')
credit.step <-lm(Balance~Income+Limit+Rating+Cards+Age+Student)
summary(credit.step)
leaps(x=, y=, wt=rep(1, NROW(x)), int=TRUE, method=c(“Cp”, “adjr2”, “r2”),
nbest=10, names=NULL, df=NROW(x), strictly.compatible=TRUE)
leaps(x=, y=, wt=rep(1, NROW(x)), int=TRUE, method=c('Cp', 'adjr2', 'r2'),
nbest=10, names=NULL, df=NROW(x), strictly.compatible=TRUE)
?leaps
??leaps
library(ggplot2)
load("C:/Users/renz/Documents/GitHub/SNU_FIRA/SNU_FIRA_BA/2-2 Statistics (ISLR)/Week2/CH4 Classification/AlzheimerDisease.RData")
load("C:/Users/renz/Downloads/AlzheimerDisease.RData")
creditdefault=read.csv("creditdefault.csv",header=T)
creditdefault[,3]=as.factor(creditdefault[,3])
train.X=creditdefault[1:25000,1:23]
test.X=creditdefault[25001:30000,1:23]
train.Y=creditdefault[1:25000,24]
test.Y=creditdefault[25001:30000,24]
test=creditdefault[25001:30000,]
X=train.X
head(X)
head(X,n=1)
creditdefault=read.csv("creditdefault.csv",header=T)
setwd('C:/Users/renz/Documents/GitHub/SNU_FIRA/SNU_FIRA_BA/2-2 Statistics (ISLR)/CH4 Classification')
creditdefault=read.csv("creditdefault.csv",header=T)
creditdefault[,3]=as.factor(creditdefault[,3])
train.X=creditdefault[1:25000,1:23]
test.X=creditdefault[25001:30000,1:23]
train.Y=creditdefault[1:25000,24]
test.Y=creditdefault[25001:30000,24]
test=creditdefault[25001:30000,]
X=train.X
head(X)
head(X,n=1)
ins = read.csv('insurance.csv', header =T)
ins = ins[,-c(3,4)]
head(ins)
load('AlzheimerDisease.RData')
head(predictors, n = 1)
library(class)
train.X=predictors[1:250,1:129]
test.X=predictors[251:333,1:129]
train.Y=as.numeric(diagnosis[1:250])
test.Y=as.numeric(diagnosis[251:333])
set.seed(1)
knn.pred=knn(train=train.X, test=test.X, cl = train.Y, k = 5, prob=T)
table(knn.pred,test.Y)
head(train.X)
load('AlzheimerDisease.RData')
head(predictors)
?str
str(predictors)
