plot(death ~ tmpd, data = chicago,
xlab = 'Temperature(Farenheit)',
ylab = 'Mortaity(deaths/day)')
death.temp.ss <- smooth.spline(x=chicago$tmpd, y=chicago$death, cv=T)
death.temp.ss <- smooth.spline(x=chicago$tmpd, y=chicago$death, cv=T)
lowtemp.rows <- which(chicago$tmpd< 75)
lowtemp.set <- chicago[lowtemp.rows,]
hightemp.set <- chicago[-lowtemp.rows,]
lowtemp.lm <- lm(death ~ tmpd, data = lowtemp.set)
hightemp.preds <- predict(lowtemp.lm, newdata = hightemp.set)
hightemp.residuals <- hightemp.set$death-hightmep.preds
hightemp.residuals <- hightemp.set$death-hightemp.preds
plot(death ~ tmpd, data = chicago,
xlab = 'Temperature(Farenheit)',
ylab = 'Mortality(deaths/day)')
death.temp.ss <- smooth.spline(x=chicago$tmpd, y=chicago$death, cv=T)
plot(age, wage, xlim = agelimes, cex =.5, col ='darkgrey')
title('Local Regression')
plot(age, wage, xlim = agelimes, cex =.5, col ='darkgrey')
library(splines)
plot(age, wage, xlim = agelimes, cex =.5, col ='darkgrey')
library(ISLR)
attach(wage)
plot(age, wage, xlim = agelimes, cex =.5, col ='darkgrey')
attach(Wage)
plot(age, wage, xlim = agelimes, cex =.5, col ='darkgrey')
plot(age, wage,cex =.5, col ='darkgrey')
title('Local Regression')
fit = loess(wage~age, span =.2, data =Wage)
fit2 = loess(wage~age, span =0.5, data = Wage)
lines(age.grid, predict(fit,data.frame(age=age.grid)),
col ='blue', lwd =2)
?poly
set.seed(2)
x=matrix(rnorm(50,2), ncol =2)
x[1:25,1] = x[1:25,1]+3
x[1:25, 2]  = x[1:25,2] -4
x
head(x)
library(datasets)
head(iris)
library(ggplot)
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width,
color = Species)) + geom_point()
x= iris[,3:4]
x
x= iris[,3:4]
hc.complete = hclust(dist(x), method = 'complete"')
hc.complete = hclust(dist(x), method = 'complete')
hc.average = hclust(dist(x), method = 'average')
hc.single = hclust(dist(x), method = 'single')
plot(hc.complete,main = 'Complete Linkage', xlab = '', sub ='', cex = .9)
cutree(hc.complete, 2)
cutree(hc.complete 3)
cutree(hc.complete,3)
out.c=ctree(hc.complte,3)
table(iris$Species,out.c)
out.c=ctree(hc.complte,3)
out.c=cutree(hc.complte,3)
table(iris$Species,out.c)
out.c=cutree(hc.complete,3)
table(iris$Species,out.c)
out.c
# 유의있는 그래프만 색깔로표시 conf.low 에 대하여 유의미한 값만 색칠
a<- twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
# 유의있는 그래프만 색깔로표시 conf.low 에 대하여 유의미한 값만 색칠
a<- twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
library(tidyr)
library(dplyr)
library(broom)
attach(twinData)
library(ggplot2)
library(OpenMx)
data(twinData)
twinData <- as_tibble(twinData)
# 유의있는 그래프만 색깔로표시 conf.low 에 대하여 유의미한 값만 색칠
a<- twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.)))
# 유의있는 그래프만 색깔로표시 conf.low 에 대하여 유의미한 값만 색칠
a<- twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
twinData %>%
inner_join(a) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2, colour = conf.low)) +
geom_point() + facet_grid(rows =vars(cohort), cols =vars(zygosity)) +
geom_abline(a=1, b=0, color ='red', linetype = 'longdash')
twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
twinData %>%
inner_join(a) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2, colour = conf.low)) +
geom_point() + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>%
inner_join(a) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2, colour = conf.low)) +
geom_boxplot() + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>%
inner_join(a) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot() + facet_grid(rows =vars(cohort), cols =vars(zygosity))
p <- ggplot(data = df.m, aes(x = factor(Quality_O), y = value)) +geom_boxplot(aes(fill=variable))
head(twinData)
twinData %>% filter(ht1,ht2)
twinData %>% filter(ht1,ht2)
twinData %>% select(ht1,ht2)
twinData
twinData %>% select(ht1,ht2,cohort,zygosity)
twinData %>% select(ht1,ht2,cohort,zygosity)
twinData %>% select(ht1,ht2,cohort,zygosity)
twinData %>% select(ht1,ht2,cohort,zygosity)
twinData %>% select(ht1,ht2,cohort,zygosity)
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()
twinData %>% select(ht1,ht2,cohort,zygosity)
twinData %>% select(ht1,ht2,cohort,zygosity)
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>% select(ht1,ht2,cohort,zygosity) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>% select(ht1,ht2,cohort,zygosity) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>% select(ht1,ht2,cohort,zygosity) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>% select(ht1,ht2,cohort,zygosity) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(group =(ht1, ht2))) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData %>% select(ht1,ht2,cohort,zygosity) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData
twinData %>% select(ht1,ht2,cohort,zygosity)
head(twinData)
twinData %>% select(ht1,ht2,cohort,zygosity) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData%>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2)) +
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData%>%
group_by(cohort,zygosity) %>%
geom_boxplot()  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData%>%
group_by(cohort,zygosity) %>%
geom_boxplot(mapping = aes(ht1,ht2, hegiht))  + facet_grid(rows =vars(cohort), cols =vars(zygosity))
twinData%>%
group_by(cohort,zygosity) %>%
geom_boxplot(mapping = aes(ht1,ht2))
twinData
gatherd_twinData <- twinData %>% gather(order, height, ht1, ht2)
gatherd_twinData %>% ggplot(mapping = aes(order, height)) +
geom_boxplot() +
facet_grid(cohort ~ zygosity)
?gather
twinData %>% gather(order, height, ht1, ht2)
twinData %>% gather(order, height, ht1, ht2)
twinData
gatherd_twinData
# Exercise 10
twinData
gatherd_twinData <- twinData %>% gather(order, height, ht1, ht2)
gatherd_twinData %>% ggplot(mapping = aes(order, height)) +
geom_boxplot() +
facet_grid(cohort ~ zygosity)
gatherd_twinData
gatherd_twinData
twinData
length(gathered_twinData)
gathered_twinData <- twinData %>% gather(order, height, ht1, ht2)
gathered_twinData %>% ggplot(mapping = aes(order, height)) +
geom_boxplot() +
facet_grid(cohort ~ zygosity)
length(gathered_twinData)
length(twinData)
sum(gathered_twinData)
count(gathered_twinData)
count(twinData)
gathered_twinData <- twinData %>% gather(order, height, ht1, ht2)
gathered_twinData %>% ggplot(mapping = aes(order, height)) +
geom_boxplot() +
facet_grid(cohort ~ zygosity)
?t.test
attach(twinData)
t.test(twinData$ht1, twinData$ht2, alternatve ='greather', paired=TRUE, conf.level = 0.95)
twinData$ht1
t.test(twinData$ht1, twinData$ht2, alternatve ='greather', paired=TRUE, conf.level = 0.95)
t.test(twinData$ht1, twinData$ht2, alternatve ='two.sided', paired=TRUE, conf.level = 0.95)
t.test(twinData$ht1, twinData$ht2, alternatve ='greater', paired=TRUE, conf.level = 0.95)
t.test(twinData$ht1, twinData$ht2, alternatve ='greater', paired=TRUE, conf.level = 0.95)
t.test(twinData$ht1, twinData$ht2, alternatve ='two_sided', paired=TRUE, conf.level = 0.05)
t.test(twinData$ht1, twinData$ht2, alternatve ='two_sided', paired=TRUE, conf.level = 0.95)
?t.test
t.test(twinData$ht1, twinData$ht2, alternatve ='two_sided',
paired=TRUE, conf.level = 0.95, var.equal = TRUE)
?var.equal
t.test(twinData$ht1, twinData$ht2, alternatve ='two_sided',
paired=TRUE, conf.level = 0.95, var.equal = TRUE)
head(twinData)
head(twinData)
twin_MZFF <- twinData %>% filter(zygosity ='MZFF')
twin_MZFF <- twinData %>% filter(zygosity =='MZFF')
twin_MZFF
?t.test
twin_MZFF %>% t.test(ht1, ht2, alternative = 'two.sided', paired=T)
help(twinData)
t.test(ht1, ht2, alternative = 'two.sided', paired=T, data = twin_MZFF)
twin_MZFF <- twinData %>% filter(zygosity =='MZFF')
twin_MZFF <- twinData %>% filter(zygosity =='MZFF')
t.test(ht1, ht2, alternative = 'two.sided', paired=T, data = twin_MZFF)
twin_DZOS <- twinData %>% filter(zygosity =='DZOS')
t.test(ht1, ht2, alternative = 'two.sided', paired=T, data = twin_DZOS)
twin_MZFF <- twinData %>% filter(zygosity =='MZFF')
t.test(ht1, ht2, alternative = 'two.sided', paired=T, data = twin_MZFF)
hist(twin_MZFF$ht1, twin_MZFF$ht2)
?hist
twin_MZFF <- twinData %>% filter(zygosity =='MZFF')
twinData %>% ggplot(mapping = aes(ht1, ht2,colour = zygosity)) +
geom_point()
#어린그룹 산점도
twin.young <- twinData[which(twinData$cohort  == 'younger'),]
twin.young %>% ggplot(mapping = aes(ht1, ht2)) +
geom_point() + geom_abline(a=1, b= 0, color = 'red', lwd = 1.0) + geom_smooth(method='lm')
#나이든 그룹 산점도
twin.old <- twinData %>% filter(cohort == 'older')
twin.old %>% ggplot(mapping = aes(ht1, ht2)) +
geom_point() + geom_abline(a=1, b= 0, color = 'red', lwd = 1.0)+ geom_smooth(method='lm')
#DZOS만 따로봐보자 # 왜 위에 있냐 얘;;
twin.DZOS <- twinData[which(twinData$zygosity  == 'DZOS'),]
twin.DZOS %>% ggplot(mapping = aes(ht1, ht2)) +
geom_point() + geom_abline(a=1, b= 0, color = 'red', lwd = 1.0) + geom_smooth(method='lm')
# 유의있는 그래프만 색깔로표시 conf.low 에 대하여 유의미한 값만 색칠
a<- twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~ht1+ht2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
twinData %>%
inner_join(a) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(ht1, ht2, colour = conf.low)) +
geom_point() + facet_grid(rows =vars(cohort), cols =vars(zygosity)) +
geom_abline(a=1, b=0, color ='red', linetype = 'longdash')
b<- twinData %>% group_by(cohort,zygosity) %>%
do(tidy(cor.test(~wt1+wt2, alternative = 'greater', data =.))) %>%
select(cohort,zygosity, conf.low)
twinData %>%
inner_join(b) %>%
group_by(cohort,zygosity) %>% ggplot(mapping = aes(wt1, wt2, colour = conf.low)) +
geom_point() + facet_grid(rows =vars(cohort), cols =vars(zygosity)) +
geom_abline(a=1, b=0, color ='red',linetype="longdash")
gathered_twinData %>% ggplot(mapping = aes(order, height)) +
geom_boxplot() +
facet_grid(cohort ~ zygosity)
twin_MZFF <- twinData %>% filter(zygosity =='MZFF')
#----
#library 설정
library(xlsx) #엑셀
library(Hmisc) #describe
library(dplyr)
library(leaps) #변수선택
library(ggplot2) # 표그리기
library(glmnet) # Lasso
require(caTools)
#----
#2. 기본설정 및 데이터 전처리
setwd('C:/Users/jayjunglim/Documents/GitHub/SNU_FIRA/SNU_FIRA_BA/2-4 Database Marketing(DM)')
mail <- read.xlsx('mailorder.xls', sheetName = "Sheet1")
head(mail)
sum(is.na(mail))  # 결측치가 없음을 확인할 수 있다.
set.seed(1)
# sample = sample.split(mail$id, SplitRatio = 0.5)
esti = mail[1:2000,]
esti <- esti[,-1]
vali  = mail[2001:4000,]
vali <- vali[,-1]
#-----
sum(esti$purchase)
sum(vali$purchase)
mean(esti$purchase)
mean(vali$purchase)
# 업샘플링해보자
library(caret)
table(esti)
table(esti$purchase)
table(esti$purchase)
x <- upsample(subset(esti, select=-purchase),esti$purchase)
x <- upSample(subset(esti, select=-purchase),esti$purchase)
x <- upSample(subset(esti, select=-purchase),esti$purchase))
x <- upSample(subset(esti, select=-purchase),esti$purchase)
table(x)
?subset
subset(esti, select=-purchase)
head(subset(esti, select=-purchase))
library(mlbench)
install.packages(mlbench0)
install.packages(mlbench)
install.packages('mlbench')
library(mlbench)
head(BreastCancer)
data("BreastCancer")
head(BreastCancer)
head(esti)
x <- upSample(subset(esti, select=-purchase),esti$purchase)
table(x)
y <- upSample(subset(BreastCancer, select=-Class), BreastCancer$Class)
y
table(y)
table(y$Class)
head(BreastCancer)
x <- upSample(subset(esti, select=-purchase),esti$purchase)
str(BreastCancer)
str(esti)
esti <- esti_factor
esti_factor <- esti
esti_factor[,purchase] <- as.factor(esti_factor$purchase)
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
str(esti_factor)
x <- upSample(subset(esti, select=-purchase),esti$purchase)
table(x)
head(BreastCancer)
str(BreastCancer)
str(esti)
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
table(x)
table(x)
table(x)
table(x$purchase)
str(x)
table(x$purchase)
mean(x$purchase)
x[,'purchase'] <- as.numeric(esti_factor$purchase)
mean(x$purchase)
esti_factor <- esti
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
esti_factor <- esti
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
table(x$Class)
mean(x$Class)
x[,'Class'] <- as.numeric(esti_factor$Class)
table(x$Class)
mean(x$Class)
x
esti_factor <- esti
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
table(x$Class)
mean(x$Class)
x[,'Class'] <- as.numeric(x$Class)
mean(x$Class)
x
str(x)
esti_factor <- esti
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
esti_factor <- esti
esti_factor
esti_factor$purchase
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
esti_factor
str(esti_factor)
esti_factor <- esti
str(esti_factor)
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
str(esti_factor)
esti_factor <- esti
str(esti)
?as.factor
str(esti_factor)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
esti_factor <- esti
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
str(esti_factor)
esti_factor <- esti
str(esti_factor)
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
str(esti_factor)
str(esti_factor)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
table(x$Class)
x[,'Class'] <- as.numeric(x$Class)
str(x)
mean(x$Class)
str(x)
glm.fit.up = glm(purchase ~gender+recency + frequency, data = x, family=binomial)
glm.fit.up = glm(Class ~gender+recency + frequency, data = x, family=binomial)
esti_factor <- esti
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
esti_factor
esti_factor[,'purchase'] <- as.factor(esti_factor$purchase)
str(esti_factor)
class(esti_factor$purchase)
typeof(esti_factor$purchase)
esti_factor %>% select('purchase') %>% head(10)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
esti_factor$Class
esti_factor$purchase
str(x)
x$purcahse
x$purchase
x$Class
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
str(x)
head(x$Class)
x$Class
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
table(x$Class)
x$Class
sum(x$Class)
x[,'Class'] <- as.numeric(x$Class)
sum(x$Class)
str(x)
head(x$Class)
x %>% select(Class)
x %>% filter(Class == 2)
x %>%  select(Class)
x %>%  select(Class) %>% ifelse(Class == 1, 0, 2)
x %>%  select(Class) %>% ifelse(Class == 1, 0, 1)
x %>%  select(Class) %>% ifelse('Class' == 1, 0, 1)
x %>%  select(Class) %>% ifelse(Class == 1, as.numeric('0'), as.numeric('1)'))
x %>%  select(Class) %>% ifelse(Class == 1, as.numeric('0'), as.numeric('1'))
x %>%  select(Class) %>% ifelse(Class == 1, num(0), num(1))
x %>%  select(Class) %>% ifelse(Class == 1, integer(0), integer(1))
x %>%  select(Class) %>% ifelse(Class == 1, F, t)
x %>%  select(Class) %>% ifelse(Class == 1, F, ㅆ)
x %>%  select(Class) %>% ifelse(Class == 1, F, T)str(x)
x %>%  select(Class) %>% ifelse(Class == 1, F, T)
a = 1
ifelse(a == 1, 0, 1)
x$Class <- ifelse(x$Class == 1, 0, 1)
str(x)
x
head(x)
mean(x$Class)
glm.fit.up = glm(Class ~gender+recency + frequency, data = x, family=binomial)
summary(glm.fit.up)
set.seed(1)
glm.probs.both = predict(glm.fit.up, type = 'response', vali)
head(glm.probs.both)
summary(glm.probs.both)  #purchase 최대확율이 0.433 에서 0.22로 떡-락
vali_probs.both %>% arrange(desc(glm.probs.both)) %>%
head(500)  %>% summarise( n(),mean(purchase))
vali_probs.both %>% arrange(desc(glm.probs.both)) %>%
head(500)  %>% summarise( n(),mean(Class))
vali_probs.both <- cbind(vali, glm.probs.both)
vali_probs.both
glm.probs.up.both = predict(glm.fit.up, type = 'response', vali)
head(glm.probs.up.both)
summary(glm.probs.up.both)  #purchase 최대확율이 0.433 에서 0.22로 떡-락
vali_probs.up.both <- cbind(vali, glm.probs.up.both)
vali_probs.up.both %>% arrange(desc(glm.probs.up.both)) %>%
head(500)  %>% summarise( n(),mean(Class))
vali_probs.up.both %>% arrange(desc(glm.probs.up.both)) %>%
head(500)  %>% summarise( n(),mean('Class'))
vali_probs.up.both
vali_probs.up.both %>% arrange(desc(glm.probs.up.both)) %>%
head(500)  %>% summarise( n(),mean(purchase))
91/500 # 18.2%의 예측
91/500 # 18.6%의 예측
vali_probs.up.both %>% arrange(desc(glm.probs.up.both)) %>%
head(500)  %>% summarise( n(),mean(purchase))
glm.probs.up.both = predict(glm.fit.up, type = 'response', vali)
head(glm.probs.up.both)
summary(glm.probs.up.both)  #purchase 최대확율이 0.433 에서 0.22로 떡-락
summary(glm.probs.up.both)  #purchase 최대확률이 0.433 에서 0.86으 떡-상
v
ali_probs.up.both %>% arrange(desc(glm.probs.up.both))
vali_probs.up.both %>% arrange(desc(glm.probs.up.both))
vali_probs.up.both %>% arrange(desc(glm.probs.up.both)) %>%
head(500)  %>% summarise( n(),mean(purchase))
vali_probs.up.both %>% arrange(desc(glm.probs.up.both)) %>%
head(500)  %>% summarise( n(),mean(purchase))
summary(glm.fit.up)
#변수선택다시
step(glm.fit.up, direction = 'both') # stepwise 방법
table(esti$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
table(x$Class)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
table(x$Class)
mean(x$Class)
x[,'Class'] <- as.numeric(x$Class)
x$Class <- ifelse(x$Class == 1, 0, 1)
mean(x$Class)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
table(x$Class)
mean(x$Class)
x <- upSample(subset(esti_factor, select=-purchase),esti_factor$purchase)
x[,'Class'] <- as.numeric(x$Class)
x$Class <- ifelse(x$Class == 1, 0, 1)
str(x)
mean(x$Class)
table(x$Class)
