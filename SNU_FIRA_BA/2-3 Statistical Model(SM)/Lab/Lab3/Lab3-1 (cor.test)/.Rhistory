library(tidyr)
library(dplyr)
#install.packages("OpenMx")
library(OpenMx)
install.package('OpenMx')
install.packages('OpenMx')
#install.packages("OpenMx")
library(OpenMx)
data(twinData)
twinData
#scatter plot
library(ggplot2)
help(twinData)
#scatter plot
library(ggplot2)
twinData %>% ggplot(mapping = aes(ht1, ht2)) +
geom_point()
#check correlation
cor(twinData$ht1, twinData$ht2, use="complete.obs")
?cor
#test whether two variables are correlated
twinData %>%
with(cor.test(~ ht1 + ht2, alternative = "greater"))
#test for each subgroup
twinData %>%
group_by(cohort,zygosity) %>%
summarize(cor.test(~ ht1 + ht2, data = .))
library(broom)
cor_result <- cor.test(~ ht1 + ht2, data = twinData)
tidy_cor_result <- tidy(cor_result)
?tidy_cor_result
class(tidy_cor_result)
str(cor_result) #list
str(tidy_cor_result) #data frame
# summarize() must be of the form "var=value"
twinData %>%
group_by(cohort,zygosity) %>%
summarize(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
# do() returns either a data frame or arbitrary objects
twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
#install.packages("mosaicData")
library(mosaicData)
# RailTrail data
data(RailTrail)
RailTrail
# hightemp vs. volume
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume))
help(RailTrail)
# A simple linear regression is fitted:
mod1 <- lm(volume ~ hightemp, data = RailTrail)
summary(mod1)
# generating an evenly spaced grid of values that covers the region where our data lies
#install.packages("modelr")
library(modelr)
grid <- RailTrail %>%
data_grid(hightemp)
grid
grid <- grid %>%
add_predictions(mod1)
grid
grid
grid <- grid %>%
add_predictions(mod1)
grid
?add_predictions
#--- Visualize predictions
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
#--- Visualize residuals
# residuals with the original dataset
RailTrail_r <- RailTrail %>%
add_residuals(mod1) %>% dplyr::select(hightemp, volume, resid)
add_residuals(mod1) %>% dplyr::select(hightemp, volume, resid)
head(RailTrail_r)
add_residuals(mod1) %>% dplyr::select(hightemp, volume, resid)
head(RailTrail_r)
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0) +
geom_point()
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0, color = 'red') +
geom_point()
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0, color = 'red') +
geom_point()
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0) +
geom_point()
# 참고 : Polynomial regression (2차 다항회귀)
mod2 <- lm(volume ~ hightemp + I(hightemp^2), data=RailTrail)
summary(mod2)
mod2 <- loess(volume ~ hightemp, data = RailTrail)
?loess
?ns
install.packages('splines')
mod2 <- loess(volume ~ hightemp, data = RailTrail)
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0) +
geom_point()
# 국소회귀
mod2 <- loess(volume ~ hightemp, data = RailTrail)
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) +
geom_line(aes(y = mod2), data = grid, colour = "red", size = 1)
# 국소회귀
mod2 <- loess(volume ~ hightemp, data = RailTrail)
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) +
geom_line(aes(y = mod2), data = grid, colour = "red", size = 1)
?mod2
class(mod2)
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) +
geom_smooth(method ='loess', size =1.0)
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume))
g <-ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume))
g+geom_smooth(method ='loess', size =1.0)
?geom_smooth
g+geom_smooth(aes(y = volume,method ='loess', size =1.0)
g+geom_smooth(aes(y = volume),method ='loess', size =1.0)
g+geom_smooth(mapping = aes(y = volume) ,method ='loess', size =1.0)
g+geom_smooth(mapping = aes(y = volume) ,method ='loess', size =1.0, s.e = F)
g+geom_smooth(mapping = aes(y = volume) ,method ='loess', size =1.0, se = F)
?geom_smooth
g+geom_smooth(mapping = aes(y = volume) ,method ='loess', size =1.0, se = F)+
geom_line(data=data.frame(spline(RailTrail, n = 100)))
?geom_line
# mtcars data set
head(mtcars)
str(mtcars)
# multiple linear regression model
mod <- lm(mpg ~ ., data = mtcars)
?augemtn
?augment
augment(mod, mtcars)
augment(mod, mtcars) %>% select(.rownames, mpg, .fitted) %>% head()
#--- List-columns
library(tibble)
# an example of a list-column data set
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl
a <- augment(mod, mtcars) %>% select(.rownames, mpg, .fitted) %>% head()
#predict 대신 augment라는다른 함수를 사용한다. (교수님이 다양하게 써보려고하시는듯)
a %>% summarise(SSE = sum((mpg-.fitted)^2))
# an example of a list-column data set
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl
temp_tbl # x와 y의 class 나온다.
#why would you need to list-column? multivalues summariries
quantile(mtcars$mpg)
# summarize() expects a single value
mtcars %>%
group_by(cyl) %>%
summarize(q = quantile(mpg))
# wrap the result in a list.
mtcars %>%
group_by(cyl) %>%
summarise(q = list(quantile(mpg)))
# summarize() expects a single value 에러 반환
mtcars %>%
group_by(cyl) %>%
summarize(q = quantile(mpg))
?summarise
# tidyr::unnest() : a list-column data set to data frame.
tibble(x = 1:2, y = list(1:4, 1)) %>% unnest(y)   # unnest를 사용하여 쭉 풀수도 있다.
# an example of a list-column data set  리스트형태로도 저장 가능하다.
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl # x와 y의 class 나온다.
temp_tbl$x
temp_tbl$y
# an example of a list-column data set  리스트형태로도 저장 가능하다.
temp_tbl <- tribble(
~x, ~y,
1:2, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl # x와 y의 class 나온다.
# an example of a list-column data set  리스트형태로도 저장 가능하다.
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
4:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl # x와 y의 class 나온다.
# an example of a list-column data set  리스트형태로도 저장 가능하다.
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
# an example of a list-column data set  리스트형태로도 저장 가능하다.
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl # x와 y의 class 나온다.
#percentiles of mpg group by cyl
probs <- c(0.01, 0.25, 0.5, 0.75, 0.99)
mtcars %>%
group_by(cyl) %>%
summarize(p = list(probs), q = list(quantile(mpg, probs))) %>%
unnest()
mtcars %>%
group_by(cyl) %>%
summarize(p = list(probs), q = list(quantile(mpg, probs))) %>%
unnest()
mtcars %>%
group_by(cyl)
mtcars %>%
group_by(cyl) %>%
summarize(p = list(probs), q = list(quantile(mpg, probs)))
mtcars %>%
group_by(cyl) %>%
summarize(p = list(probs), q = list(quantile(mpg, probs))) %>%
unnest()
a <- augment(mod, mtcars) %>% select(.rownames, mpg, .fitted) %>% head()
a$.fitted
sse <- sum((mpg-a$.fitted)^2)
mpg
#--- Creating folds
library(modelr)옴
#generate 5 folds using modelr::crossv_kfold()
set.seed(1)
folds <- crossv_kfold(mtcars, k = 5)
folds
# row number of test set in first partition
folds$test[[1]]
# row number of test set in first partition
folds$test[[1]]
# purrr::map() applies each train to lm function
library(dplyr)
library(purrr)
folds <- folds %>% mutate(model = map(train, ~ lm(mpg ~ ., data = .)))
# map 함수는
folds
#  동일 map(rain, function(x), lm(mpg ~., data =x))
folds
#which is roughly the same as
model_tmp <- list()
#which is roughly the same as
model_tmp
attach(folds) # used to call $train directly
for( i in 1:nrow(folds)) {
model_tmp[[i]] <- lm(mpg ~ ., data = train[[i]])
}
detach(folds)
#the model fitted to our first set of training data is:
folds$model[[1]] %>% summary()
#the model fitted to our first set of training data is:
folds$model[[1]] %>% summary()
folds
cv.pred <- folds %>% mutate(predicted = map2(model, test, ~ augment(.x, newdata = .y))) %>% unnest(predicted)
head(cv.pred)
#cross-validated SSE
cv.pred %>% summarize(SSE =  sum(mpg - .fitted)^2)
library(tidyr)
cv.pred <- folds %>% mutate(predicted = map2(model, test, ~ augment(.x, newdata = .y))) %>% unnest(predicted)
head(cv.pred)
#cross-validated SSE
cv.pred %>% summarize(SSE =  sum(mpg - .fitted)^2)
# No need to understand what is going on in this R chunk
vars <- colnames(select(mtcars,-mpg))
allsubmodels <- combn(vars,3)  # 3개씩 뽑은뒤 조합하여 저장
Formulas <- apply(allsubmodels,2, function(x) paste("mpg ~",paste(x,collapse="+")))
head(Formulas)
set.seed(1)
folds <- crossv_kfold(mtcars, k = 5) # start over
Model_validation <- list()
for(i in seq_along(Formulas)){
SSE <- folds %>%
mutate(model = map(train, ~ lm(as.formula(Formulas[i]), data = .))) %>%
unnest(predicted = map2(model, test, ~ augment(.x, newdata = .y))) %>%
summarize(SSE =  sum(mpg - .fitted)^2)
Model_validation[[i]] <- tibble(formula = Formulas[i], SSE = as_vector(SSE))
}
bind_rows(Model_validation) %>% arrange(SSE) %>% head()
