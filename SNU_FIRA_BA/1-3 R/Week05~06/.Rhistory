ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=seoul032823, aes(LON, LAT, col = PM10),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
# -------------------------------------------
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=seoul032823, aes(LON, LAT, col = PM10),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
# -------------------------------------------
class(seoul032823)
coordinates(seoul032823) <- ~LON+LAT
class(seoul032823)
# -------------------------------------------
LON.range <- c(126.5, 127.5)
LAT.range <- c(37, 38)
seoul032823.grid <- expand.grid(
LON = seq(from = LON.range[1], to = LON.range[2], by = 0.01),
LAT = seq(from = LAT.range[1], to = LAT.range[2], by = 0.01))
# -------------------------------------------
plot(seoul032823.grid)
points(seoul032823, pch= 16,col="red")
# -------------------------------------------
coordinates(seoul032823.grid)<- ~LON+LAT ## sp class
gridded(seoul032823.grid)<- T
plot(seoul032823.grid)
points(seoul032823, pch= 16,col="red")
# -------------------------------------------
if(!require(automap)){install.packages("autoKrige"); library(automap)}
seoul032823_OK <- autoKrige(formula = PM10~1,
input_data = seoul032823,
new_data = seoul032823.grid )
# -------------------------------------------
LON.range <- c(126.5, 127.5)
LAT.range <- c(37, 38)
seoul032823.grid <- expand.grid(  # 격자잡아줌
LON = seq(from = LON.range[1], to = LON.range[2], by = 0.01),
LAT = seq(from = LAT.range[1], to = LAT.range[2], by = 0.01))
# -------------------------------------------
plot(seoul032823.grid)
points(seoul032823, pch= 16,col="red")    # 격자를 만들어놓고 점찍기
seoul032823_OK <- autoKrige(formula = PM10~1,
input_data = seoul032823,
new_data = seoul032823.grid )
?extend
# -------------------------------------------
plot(seoul032823.grid)
points(seoul032823, pch= 16,col="red")    # 격자를 만들어놓고 점찍기
# -------------------------------------------
head(seoul032823_OK$krige_output@coords, 2)
head(seoul032823_OK$krige_output@data$var1.pred,2)
ggplot()+ theme_minimal() +
geom_tile(data = myKrige, aes(x= LON, y= LAT, fill = pred)) +
geom_map(data= myKorea, map= myKorea, aes(map_id=id,group=group),
fill=NA, colour="black") +
coord_cartesian(xlim= LON.range ,ylim= LAT.range) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude")+
theme(title= element_text(hjust = 0.5,vjust = 1,face= c("bold")))+
scale_fill_viridis(option="magma")
# -------------------------------------------
myPoints <- data.frame(seoul032823)
myKorea <- data.frame(skorea)
myKrige <- data.frame(seoul032823_OK$krige_output@coords,
pred = seoul032823_OK$krige_output@data$var1.pred)
# -------------------------------------------
if(!require(viridis)){install.packages("viridis"); library(viridis)}
ggplot()+ theme_minimal() +
geom_tile(data = myKrige, aes(x= LON, y= LAT, fill = pred)) +
geom_map(data= myKorea, map= myKorea, aes(map_id=id,group=group),
fill=NA, colour="black") +
coord_cartesian(xlim= LON.range ,ylim= LAT.range) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude")+
theme(title= element_text(hjust = 0.5,vjust = 1,face= c("bold")))+
scale_fill_viridis(option="magma")
rm(list = ls()); gc(reset = T)
# --------------------------------
if(!require(httr)){install.packages("httr"); library(httr)}
if(!require(rvest)){install.packages("rvest"); library(rvest)}
# --------------------------------교육자료에는 ****로 표시되어 있습니다.
service_key = "%2FTx8UW5QkXse141bToOh9SO%2FbpFMoFAm4th151RoR4VW75y%2BGv3XzlqxeF80oGKEcWZ8pSoXvEi6%2BNnzlR%2FRrQ%3D%3D"
# --------------------------------
url = paste0("http://openapi.airkorea.or.kr/openapi/services/rest/",
"ArpltnInforInqireSvc/getCtprvnMesureSidoLIst?",
"sidoName=서울",
"&searchCondition=DAILY",
"&pageNo=",1,
"&numOfRows=",25,
"&ServiceKey=",service_key)
# --------------------------------
if(!require(httr)){install.packages("httr"); library(httr)}
url_get = GET(url)
# --------------------------------
if(!require(xml2)){install.packages("xml2"); library(xml2)}
url_xml = read_xml(url_get)
url_xml
# --------------------------------
if(!require(rvest)){install.packages("rvest"); library(rvest)}
item_list = xml_nodes(url_xml, 'items item')
item_list[[1]]
# --------------------------------
tmp_item = xml_children(item_list[[1]])
tmp_item
# --------------------------------
tmp_item = xml_text(tmp_item)
tmp_item
# --------------------------------
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_list[[1]]
item_list[[2]]
# --------------------------------
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
head(item_dat)
tmp = xml_nodes(url_xml, 'items item')
colnames_dat = html_name(xml_children(tmp[[1]]))
colnames_dat
# --------------------------------
colnames(item_dat) = colnames_dat
head(item_dat)
# --------------------------------
air_data = NULL
for(i in 1:24)
{
url = paste0("http://openapi.airkorea.or.kr/openapi/services/rest/",
"ArpltnInforInqireSvc/getCtprvnMesureSidoLIst?",
"sidoName=서울",
"&searchCondition=DAILY",
"&pageNo=",i,
"&numOfRows=",25,
"&ServiceKey=",service_key)
url_xml = read_xml(GET(url))
item_list = url_xml %>% xml_nodes('items item')
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
air_data = rbind(item_dat, air_data)
}
# --------------------------------
# 샤이니 코드
library(shiny)
ui = fluidPage(
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(
textOutput("output_text")
)
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server= server)
# --------------------------------
library(shiny)
ui = fluidPage(
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(
textOutput("output_text")
)
)
)
server = function(input, output)
{
output$output_text = renderText({
input$input_text
})
}
shinyApp(ui = ui, server= server)
# --------------------------------
ui = fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9),
checkboxInput('center_tf','Center points')
),
mainPanel(
plotOutput('plot1')
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server = server)
rm(list = ls()); gc(reset = T)
if(!require(httr)){install.packages("httr"); library(httr)}
if(!require(rvest)){install.packages("rvest"); library(rvest)}
library(shiny)
ui = fluidPage(
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(
textOutput("output_text")
)
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server= server)
library(shiny)
ui = fluidPage(
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(                                     # 구성요소1: sidebar panel
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(                                        # 구성요소2: mainpanel
textOutput("output_text")
)
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server= server)
library(shiny)
ui = fluidPage(                                       # 기본적으로 html을 만들어주는 함ㅅ
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(                                     # 구성요소1: sidebar panel
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(                                        # 구성요소2: mainpanel
textOutput("output_text")
)
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server= server)수
library(shiny)
ui = fluidPage(                                       # 기본적으로 html을 만들어주는 함ㅅ
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(                                     # 구성요소1: sidebar panel
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(                                        # 구성요소2: mainpanel
textOutput("output_text")
)
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server= server)
library(shiny)
ui = fluidPage(
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(
textOutput("output_text")
)
)
)
server = function(input, output)
{
output$output_text = renderText({
input$input_text
})
}
shinyApp(ui = ui, server= server)
library(shiny)
ui = fluidPage(
titlePanel("Welcome shiny!"),
sidebarLayout(
sidebarPanel(
textInput("input_text", "텍스트를 입력하세요.")
),
mainPanel(
textOutput("output_text")
)
)
)
server = function(input, output)
{
output$output_text = renderText({
paste(input$input_text, '만세')
})
}
shinyApp(ui = ui, server= server)
# --------------------------------
ui = fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9),
checkboxInput('center_tf','Center points')
),
mainPanel(
plotOutput('plot1')
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server = server)
ui = fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9),
checkboxInput('center_tf','Center points')
),
mainPanel(
plotOutput('plot1')
)
)
server = function(input, output)
{
selectedData = reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
if(input$center_tf) points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
ui = fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9),
checkboxInput('center_tf','Center points')
),
mainPanel(
plotOutput('plot1')
)
)
server = function(input, output)
{
return(NULL)
}
shinyApp(ui = ui, server = server)
?reactive
summaryBy
?summaryBy
??summaryBy
?reactive
if(!require(rvest)){install.packages('rvest') ; library(rvest)}
if(!require(httr)){install.packages('httr') ; library(httr)}
if(!require(KoNLP)){install.packages('KoNLP') ; library(KoNLP)} # 세종사전
install.packages(c('KoNLP','wordcloud'))
install.packages("http://cran.r-project.org/bin/windows/contrib/3.0/tm_0.5-10.zip",repos=NULL)
install.packages('yaml')
install.packages('rJava')
install.packages('tm')
library(rJava)
library(KoNLP)
library(tm)    # 영문 텍스트 마이닝
library(wordcloud) # RColorBrewer()함수 제공
library(yaml)
#------------
#블로그출처1 : http://blog.naver.com/PostView.nhn?blogId=nonamed0000&logNo=220959119930&parentCategoryNo=&categoryNo=9&viewDate=&isShowPopularPosts=true&from=search
client_id = '';
client_secret = ;
header = httr::add_headers(
'X-Naver-Client-Id' = client_id,
'X-Naver-Client-Secret' = client_secret)
#블로그출처
# ---------------------
query = '곱창'
# encoding 변화
query = iconv(query, to = 'UTF-8', toRaw = T)
# iconv(query, to = "UTF-8", toRaw = F)
query = paste0('%', paste(unlist(query), collapse = '%'))
query = toupper(query)
# ---------------------
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
i = 1
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',
query,'&display=',display_num,'&start=',
start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
# ---------------------
i = 1
final_dat = NULL
for(i in 1:length(start_point))
{
# request xml format
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
#option header
url_body = read_xml(GET(url, header), encoding = "UTF-8")
title = url_body %>% xml_nodes('item title') %>% xml_text()
bloggername = url_body %>% xml_nodes('item bloggername') %>% xml_text()
postdate = url_body %>% xml_nodes('postdate') %>% xml_text()
link = url_body %>% xml_nodes('item link') %>% xml_text()
description = url_body %>% xml_nodes('item description') %>% html_text()
temp_dat = cbind(title, bloggername, postdate, link, description)
final_dat = rbind(final_dat, temp_dat)
cat(i, '\n')
}
final_dat_orgin = data.frame(final_dat, stringsAsFactors = F)
data2 = final_dat_orgin  # 블로그 주소 , 날짜
data2$description = gsub('\n|\t|<.*?>|&quot;',' ',data2$description)
data2$description = gsub('[^가-힣a-zA-Z]',' ',data2$description)
data2$description = gsub(' +',' ',data2$description)
# 여기서 '곱창','으로' '마마(?)' ,'진짜'오랜만 을
# Gsub함수로 지우기
nouns=KoNLP::extractNoun(final_data2$description)
data_unlist = unlist(nouns)
filter_data = Filter(function(x){nchar(x)>=2}, data_unlist)
filter_data_table = table(filter_data)
sort(filter_data_table, decreasing=T) %>% head(30)
install.packages("yaml")
install.packages("rJava")
install.packages("rJava")
client_id = 'AIhq1yM8BsaR1QA8S_1S';
client_secret = 'KcwLvPLKUx';
header = httr::add_headers(
'X-Naver-Client-Id' = client_id,
'X-Naver-Client-Secret' = client_secret)
# ---------------------
query = '곱창'
# encoding 변화
query = iconv(query, to = 'UTF-8', toRaw = T)
# iconv(query, to = "UTF-8", toRaw = F)
query = paste0('%', paste(unlist(query), collapse = '%'))
query = toupper(query)
# ---------------------
end_num = 1000
display_num = 100
start_point = seq(1,end_num,display_num)
i = 1
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',
query,'&display=',display_num,'&start=',
start_point[i],'&sort=sim')
url_body = read_xml(GET(url, header))
# ---------------------
i = 1
final_dat = NULL
for(i in 1:length(start_point))
{
# request xml format
url = paste0('https://openapi.naver.com/v1/search/blog.xml?query=',query,'&display=',display_num,'&start=',start_point[i],'&sort=sim')
#option header
url_body = read_xml(GET(url, header), encoding = "UTF-8")
title = url_body %>% xml_nodes('item title') %>% xml_text()
bloggername = url_body %>% xml_nodes('item bloggername') %>% xml_text()
postdate = url_body %>% xml_nodes('postdate') %>% xml_text()
link = url_body %>% xml_nodes('item link') %>% xml_text()
description = url_body %>% xml_nodes('item description') %>% html_text()
temp_dat = cbind(title, bloggername, postdate, link, description)
final_dat = rbind(final_dat, temp_dat)
cat(i, '\n')
}
final_dat_orgin = data.frame(final_dat, stringsAsFactors = F)
data2 = final_dat_orgin  # 블로그 주소 , 날짜
data2$description = gsub('\n|\t|<.*?>|&quot;',' ',data2$description)
data2$description = gsub('[^가-힣a-zA-Z]',' ',data2$description)
data2$description = gsub(' +',' ',data2$description)
nouns=KoNLP::extractNoun(final_data2$description)
data_unlist = unlist(nouns)
nouns=KoNLP::extractNoun(final_data2$description)
if(!require(rvest)){install.packages('rvest') ; library(rvest)}
if(!require(httr)){install.packages('httr') ; library(httr)}
if(!require(KoNLP)){install.packages('KoNLP') ; library(KoNLP)} # 세종사전
if(!require(wordcloud)){install.packages('wordcloud') ; library(wordcloud)} # RColorBrewer()함수 제공
if(!require(yaml)){install.packages('yaml') ; library(yaml)}
if(!require(rJava)){install.packages('rJava') ; library(rJava)}
nouns=KoNLP::extractNoun(final_data2$description)
if(!require(KoNLP)){install.packages('KoNLP') ; library(KoNLP)} # 세종사전
nouns=KoNLP::extractNoun(final_data2$description)
if(!require(rJava)){install.packages('rJava') ; library(rJava)}
if(!require(KoNLP)){install.packages('KoNLP') ; library(KoNLP)} # 세종사전
nouns=KoNLP::extractNoun(final_data2$description)
